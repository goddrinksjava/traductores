
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package traductores;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class BasicParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return BasicSym.class;
}

  /** Default constructor. */
  @Deprecated
  public BasicParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public BasicParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public BasicParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\010\000" +
    "\002\004\014\000\002\004\007\000\002\004\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\004\000\002\006" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\020\011\011\014\005\017\014\023\012\026" +
    "\010\027\013\030\015\001\002\000\024\002\uffff\011\uffff" +
    "\014\uffff\017\uffff\020\uffff\023\uffff\026\uffff\027\uffff\030" +
    "\uffff\001\002\000\004\040\075\001\002\000\024\002\ufffd" +
    "\011\ufffd\014\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\001\002\000\022\002\074\011\011\014\005" +
    "\017\014\023\012\026\010\027\013\030\015\001\002\000" +
    "\016\011\011\014\005\017\014\023\012\027\013\030\015" +
    "\001\002\000\020\005\050\024\047\034\021\035\022\037" +
    "\027\040\024\041\025\001\002\000\020\005\023\024\020" +
    "\034\021\035\022\037\027\040\024\041\025\001\002\000" +
    "\004\040\062\001\002\000\020\011\011\014\005\017\014" +
    "\023\012\026\010\027\013\030\015\001\002\000\004\040" +
    "\016\001\002\000\004\025\017\001\002\000\020\005\023" +
    "\024\020\034\021\035\022\037\027\040\024\041\025\001" +
    "\002\000\020\005\023\024\020\034\021\035\022\037\027" +
    "\040\024\041\025\001\002\000\044\002\ufff0\006\ufff0\011" +
    "\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0\020\ufff0" +
    "\023\ufff0\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\036\ufff0\001\002\000\044\002\uffef\006\uffef\011\uffef" +
    "\012\uffef\013\uffef\014\uffef\015\uffef\017\uffef\020\uffef\023" +
    "\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef" +
    "\036\uffef\001\002\000\020\005\023\024\020\034\021\035" +
    "\022\037\027\040\024\041\025\001\002\000\044\002\ufff1" +
    "\006\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\017" +
    "\ufff1\020\ufff1\023\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1" +
    "\032\ufff1\033\ufff1\036\ufff1\001\002\000\044\002\uffee\006" +
    "\uffee\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\017\uffee" +
    "\020\uffee\023\uffee\026\uffee\027\uffee\030\uffee\031\uffee\032" +
    "\uffee\033\uffee\036\uffee\001\002\000\034\002\ufffb\011\ufffb" +
    "\013\ufffb\014\ufffb\017\ufffb\020\ufffb\023\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\030\033\032\036\031\001\002\000\044" +
    "\002\uffed\006\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\017\uffed\020\uffed\023\uffed\026\uffed\027\uffed\030\uffed" +
    "\031\uffed\032\uffed\033\uffed\036\uffed\001\002\000\020\005" +
    "\023\024\020\034\021\035\022\037\027\040\024\041\025" +
    "\001\002\000\020\005\023\024\020\034\021\035\022\037" +
    "\027\040\024\041\025\001\002\000\020\005\023\024\020" +
    "\034\021\035\022\037\027\040\024\041\025\001\002\000" +
    "\044\002\uffea\006\uffea\011\uffea\012\uffea\013\uffea\014\uffea" +
    "\015\uffea\017\uffea\020\uffea\023\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\032\uffea\033\uffea\036\uffea\001\002\000\044" +
    "\002\uffe8\006\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015" +
    "\uffe8\017\uffe8\020\uffe8\023\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\032\uffe8\033\uffe8\036\uffe8\001\002\000\044\002" +
    "\uffe9\006\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\017\uffe9\020\uffe9\023\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\033\uffe9\036\uffe9\001\002\000\012\006\037" +
    "\031\030\033\032\036\031\001\002\000\044\002\uffec\006" +
    "\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\017\uffec" +
    "\020\uffec\023\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\033\uffec\036\uffec\001\002\000\044\002\uffeb\006\uffeb" +
    "\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020" +
    "\uffeb\023\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\033\uffeb\036\uffeb\001\002\000\022\011\011\014\005\017" +
    "\014\020\043\023\012\026\010\027\013\030\015\001\002" +
    "\000\024\002\001\011\001\014\001\017\001\020\001\023" +
    "\001\026\001\027\001\030\001\001\002\000\004\021\044" +
    "\001\002\000\020\005\050\024\047\034\021\035\022\037" +
    "\027\040\024\041\025\001\002\000\030\002\ufff7\011\ufff7" +
    "\013\ufff7\014\ufff7\017\ufff7\020\ufff7\023\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\033\056\001\002\000\012\031\030\032\053" +
    "\033\032\036\031\001\002\000\020\005\050\024\047\034" +
    "\021\035\022\037\027\040\024\041\025\001\002\000\020" +
    "\005\050\024\047\034\021\035\022\037\027\040\024\041" +
    "\025\001\002\000\006\006\055\033\056\001\002\000\014" +
    "\006\037\031\030\032\053\033\032\036\031\001\002\000" +
    "\020\005\023\024\020\034\021\035\022\037\027\040\024" +
    "\041\025\001\002\000\040\002\ufff4\006\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\017\ufff4\020\ufff4\023\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\031\030\033\032\036\031\001\002\000" +
    "\034\002\ufff5\006\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\017\ufff5\020\ufff5\023\ufff5\026\ufff5\027\ufff5\030\ufff5\033" +
    "\ufff5\001\002\000\020\005\050\024\047\034\021\035\022" +
    "\037\027\040\024\041\025\001\002\000\034\002\ufff2\006" +
    "\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\017\ufff2\020\ufff2" +
    "\023\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2\001\002\000" +
    "\034\002\ufff3\006\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\017\ufff3\020\ufff3\023\ufff3\026\ufff3\027\ufff3\030\ufff3\033" +
    "\ufff3\001\002\000\014\006\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\036\uffeb\001\002\000\004\025\063\001\002\000\020\005" +
    "\023\024\020\034\021\035\022\037\027\040\024\041\025" +
    "\001\002\000\034\002\ufffc\011\ufffc\013\ufffc\014\ufffc\017" +
    "\ufffc\020\ufffc\023\ufffc\026\ufffc\027\ufffc\030\ufffc\031\030" +
    "\033\032\036\031\001\002\000\034\002\ufff6\011\ufff6\013" +
    "\ufff6\014\ufff6\017\ufff6\020\ufff6\023\ufff6\026\ufff6\027\ufff6" +
    "\030\ufff6\031\030\033\032\036\031\001\002\000\006\012" +
    "\067\033\056\001\002\000\016\011\011\014\005\017\014" +
    "\023\012\027\013\030\015\001\002\000\026\002\ufffa\011" +
    "\ufffa\013\071\014\ufffa\017\ufffa\020\ufffa\023\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\001\002\000\016\011\011\014\005\017" +
    "\014\023\012\027\013\030\015\001\002\000\026\002\ufff9" +
    "\011\ufff9\013\ufff9\014\ufff9\017\ufff9\020\ufff9\023\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\001\002\000\024\002\ufffe\011\ufffe" +
    "\014\ufffe\017\ufffe\020\ufffe\023\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\025\076" +
    "\001\002\000\020\005\023\024\020\034\021\035\022\037" +
    "\027\040\024\041\025\001\002\000\012\015\100\031\030" +
    "\033\032\036\031\001\002\000\004\040\101\001\002\000" +
    "\020\011\011\014\005\017\014\023\012\026\010\027\013" +
    "\030\015\001\002\000\004\026\103\001\002\000\004\016" +
    "\104\001\002\000\004\040\105\001\002\000\026\002\ufff8" +
    "\011\ufff8\013\ufff8\014\ufff8\017\ufff8\020\ufff8\023\ufff8\026" +
    "\ufff8\027\ufff8\030\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\010\002\006\003\003\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\041\004\005\001\001\000\004\004\072\001\001\000" +
    "\006\005\045\006\065\001\001\000\004\005\064\001\001" +
    "\000\002\001\001\000\010\002\040\003\003\004\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\025" +
    "\001\001\000\004\005\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\034\001\001\000\004\005\033\001\001\000\004" +
    "\005\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\003\041\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\045\006\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\060\006" +
    "\057\001\001\000\006\005\051\006\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\045\006\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\067\001\001\000\002\001\001\000\004\004\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\101\004\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$BasicParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$BasicParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$BasicParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntaxis_error(Symbol s){
        this.s=s;
System.out.println("compiler has detected a syntax error at line " + s.left 
        + " column " + s.right);
    }
    public Symbol getS(){
        return s;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$BasicParser$actions {
  private final BasicParser parser;

  /** Constructor */
  CUP$BasicParser$actions(BasicParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$BasicParser$do_action_part00000000(
    int                        CUP$BasicParser$act_num,
    java_cup.runtime.lr_parser CUP$BasicParser$parser,
    java.util.Stack            CUP$BasicParser$stack,
    int                        CUP$BasicParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$BasicParser$result;

      /* select the action based on the action number */
      switch (CUP$BasicParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program stmts 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		RESULT = start_val;
              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$BasicParser$parser.done_parsing();
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= stmts 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmts ::= LABEL stmt 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmts ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmts",1, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= LET IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= CONST IDENTIFIER ASSIGN expr 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object ident = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= IF cond THEN stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= IF cond THEN stmt ELSE stmt 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-5)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= FOR IDENTIFIER ASSIGN expr TO IDENTIFIER stmts LABEL NEXT IDENTIFIER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-6)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-9)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= DO program LOOP UNTIL cond 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-4)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= PRINT expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cond ::= PL cond PR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cond ::= expr COMP expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cond ::= NOT cond 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cond ::= cond BOOLBINOP cond 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("cond",4, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= IDENTIFIER 
            {
              Object RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object identifier = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= CHAR 
            {
              Object RESULT =null;
		int charaleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int chararight = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object chara = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= PL expr PR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr BOOLBINOP expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr NUMBINOP expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr CONCAT expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$BasicParser$stack.peek()).value;

              CUP$BasicParser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$BasicParser$stack.elementAt(CUP$BasicParser$top-2)), ((java_cup.runtime.Symbol)CUP$BasicParser$stack.peek()), RESULT);
            }
          return CUP$BasicParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$BasicParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$BasicParser$do_action(
    int                        CUP$BasicParser$act_num,
    java_cup.runtime.lr_parser CUP$BasicParser$parser,
    java.util.Stack            CUP$BasicParser$stack,
    int                        CUP$BasicParser$top)
    throws java.lang.Exception
    {
              return CUP$BasicParser$do_action_part00000000(
                               CUP$BasicParser$act_num,
                               CUP$BasicParser$parser,
                               CUP$BasicParser$stack,
                               CUP$BasicParser$top);
    }
}

}
